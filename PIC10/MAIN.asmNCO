      __CONFIG _FOSC_INTOSC & _BOREN_ON & _WDTE_OFF & _PWRTE_ON & _MCLRE_OFF & _CP_OFF & _LVP_OFF & _LPBOR_ON & _BORV_HI & _WRT_OFF
;      __CONFIG _FOSC_INTOSC & _BOREN_ON & _WDTE_OFF & _PWRTE_ON & _MCLRE_OFF & _CP_OFF & _LVP_OFF & _LPBOR_OFF & _BORV_HI & _WRT_OFF
#include p10f320.inc 
     
;====================================================================
; Variables
;====================================================================
PWMIN	    equ RA0 ; Port PWM
ZC	    equ RA1 ; Port Zero Cross
OUT	    equ RA2 ; Port MOC
ON	    equ 0x00; FIRE ENABLE
FULL	    equ 0x01; ON/OFF TRIAC
   
	   constant Period = 0x8C ; (100 Hz)
	   constant C.input_mask = (1<<PWMIN)
	   constant fixdec = 0x01
	   constant mindim = 0x1E 
	   constant onfire = 0x03
; Variables (0x40 thru 0x7F)
           udata
TMR0tmp	    res 1
W_TEMP	    res 1
STATUS_TEMP res 1
NCOtmp	    res 2
count	    res 1
TMP	    res 1
FIRE	    res 1
PORTAtmp	    res 1	    
inputs.this_time    res 1	    
inputs.last_time    res 1
edgeR.detected	    res 1
edgeF.detected	    res 1	    

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      org  0x00 ; RESET VECTOR
	goto  START
      
      org  0x04 ; INTERRUPT VECTOR
	MOVWF W_TEMP	  ;Copy W to TEMP register
	SWAPF STATUS,W	  ;Swap status to be saved into W
			  ;Swaps are used because they do 
			  ;not affect the status bits
	MOVWF STATUS_TEMP ;Save status to bank zero STATUS_TEMP register
	
	BTFSC	PIR1,TMR2IF	; INTERRUPT TMR2
	GOTO	INTTMR2
	BTFSC	INTCON,IOCIF	; INTERRUPT-ON-CHANGE
	GOTO	ICPN
	GOTO	ENDOFINT
		

ICPN	
	BTFSS	IOCAF, ZC ; INTERRUPT-ON-CHANGE PORTA 
	GOTO	ENDOFINT
	
IC
	MOVLW   (1 << ZC)
	XORWF	IOCAF, W
	ANDWF	IOCAF, F
	BTFSC	PORTA, ZC
	GOTO	ENDOFINT
	CLRF	TMR2
	BSF	LATA,OUT
	BSF	T2CON,TMR2ON
	BSF	PWM1CON,PWM1EN	
	GOTO	ENDOFINT
INTTMR2
	;BTFSC	FIRE,ON
	BCF	LATA,OUT
	BCF	PWM1CON,PWM1EN
	BCF	T2CON,TMR2ON
	MOVLW   (1 << TMR2IF);|(1 << NCO1IF)
	XORWF	PIR1, W
	ANDWF	PIR1, F
ENDOFINT
	SWAPF	STATUS_TEMP,W	;Swap STATUS_TEMP register into W
				;(sets bank to original state)
	MOVWF	STATUS		;Move W into STATUS register
	SWAPF	W_TEMP,F	;Swap W_TEMP
	SWAPF	W_TEMP,W	;Swap W_TEMP into W
	retfie
      
;====================================================================
; CODE SEGMENT
;====================================================================

START
; OSC 4MHz (default 8MHz)
    CLRF	TMP     
    MOVLW	b'00100000'
    MOVWF	TMP
    MOVLW	b'01110000'
    IORWF	OSCCON,W
    XORWF	TMP,W
    MOVWF	OSCCON

; INIT VARS


    
; INIT PORTA
    CLRF	PORTA 
    CLRF        LATA 
    CLRF	ANSELA ;Ports all digital
    
; After reset all ports as input
    bsf		TRISA,ZC ; Input port Zero Cross
    bsf		TRISA,PWMIN ; Input port PWM
    BCF		TRISA,OUT    
    ;BSF		WPUA,PWMIN


; TMR0 INIT    
    MOVLW	b'10000011' ;1:16 tmr0 prescaler, pullups disable   
    MOVWF	OPTION_REG
   
; TMR2 INIT
    MOVLW	b'00000011' ;1:64 tmr2 prescaler, 1:1 postscaler, tmr2 off
    MOVWF	T2CON
    MOVLW	Period
    MOVWF	PR2
    BSF		PIE1,TMR2IE ; Interrup TMR2 Enable

; PWM INIT
    MOVLW	b'00001111'
    MOVWF	PWM1DCH
    MOVLW	b'11000000'
    MOVWF	PWM1DCL 
    CLRF	PWM1CON
    ;bsf		PWM1CON,PWM1POL
    
; NCO INIT 
    MOVLW   b'00000010'   
    MOVWF   NCO1CLK
    CLRF    NCO1CON
    CLRF    NCO1ACCL
    CLRF    NCO1ACCH
    CLRF    NCO1ACCU
    ;MOVLW   mindim
    MOVLW   0x40
    MOVWF   NCO1INCL
    MOVLW   0x0D
    MOVWF   NCO1INCH     
    ;BSF	    PIE1,NCO1IE ; Interrup NCO Enable    

;INTC   
    BSF	    IOCAN,ZC ; Int for ZC negativ front
    BSF	    INTCON,IOCIE ; Enable Interrupt-on-Change
    BSF	    INTCON,PEIE ; Peripheral Interrupt
    BSF	    INTCON,GIE ; Global Interrupt Enable
    CLRF    FIRE
    CLRF    NCOtmp+1
    CLRF    NCOtmp 
    ;MOVLW   mindim
    ;MOVWF   NCOtmp
    CLRF    TMR0tmp
;    movlw   0x10;0x0F
 
    clrf    count
    

MAINLOOP
    BTFSS   PWM1CON,PWM1OUT
    nop
    ;BSF	    LATA,OUT
    GOTO    MAINLOOP
;    BTFSS   INTCON,TMR0IF
 ;   GOTO    $-1    
 ;   CLRF    TMR0
 ;   MOVLW   (1 << TMR0IF)
 ;   XORWF   INTCON, W
 ;   ANDWF   INTCON, F
  ;  DECFSZ  count,F
 ;   goto    MAINLOOP    
  ;  movlw   0x64;0x0F
  ;  movwf    count
  ;  CLRZ
  ;  INCF    NCO1INCL,F
  ;  BTFSC   STATUS,Z
  ;  INCF    NCO1INCH,F
  ;  BSF	    FIRE,ON
  ;  goto    MAINLOOP
    ;MOVF    count,W
    ;CLRC
    ;CLRZ    
    ;SUBWF   TMR0tmp,W
    ;BTFSC   STATUS,Z
    ;goto    NCOload
    ;BTFSS   STATUS,C
    ;goto    dec.count
    ;INCF    count,F
    ;MOVF    NCOtmp,W
    ;CLRC   
    ;ADDLW   fixdec
    ;BTFSC   STATUS,C
    ;INCF    NCOtmp+1,F
    ;MOVWF   NCOtmp
    ;goto    edge.rise
;dec.count    
;    DECF    count,F
 ;   MOVF    NCOtmp,W
;    CLRC   
 ;   SUBLW   fixdec
  ;  BTFSC   STATUS,C
   ; DECF    NCOtmp+1,F
  ;  MOVWF   NCOtmp 
  ;  goto    edge.rise    

;NCOload
;    movf    count,F
;    clrc
;    sublw   onfire
;    btfss   STATUS,C
;    BCF	    FIRE,ON
;    btfsc   STATUS,C
;    BSF	    FIRE,ON
;    movf    NCOtmp,W
;    movwf   NCO1INCL
;    movf    NCOtmp+1,W
;    movwf   NCO1INCH
    BTFSS   PORTA,PWMIN
    BTFSC   PORTA,PWMIN
    BTFSS   PORTA,PWMIN
    CLRF    PORTAtmp 
    BTFSC   PORTA,PWMIN    
    BSF	    PORTAtmp,PWMIN

	
	
edge.rise
	movfw           PORTAtmp                           ; load PORTA to Wreg
        andlw           C.input_mask                    ; mask out I/O bits we're not interested in
        movwf           inputs.this_time                ; save result to variable
        xorwf           inputs.last_time,W              ; XOR last input value with current input value
        andwf           inputs.this_time,W              ; keep only bits that have changed from 0 to 1
        movwf           edgeR.detected                   ; save result to variable;

	movf		inputs.this_time,W                ; load result to variable
	xorwf           inputs.last_time,W              ; XOR last input value with current input value
        andwf           inputs.last_time,W              ; keep only bits that have changed from 0 to 1
        movwf           edgeF.detected

	movfw           inputs.this_time                 ; copy input.this_time to 
        movwf           inputs.last_time

	BTFSC		edgeR.detected, PWMIN
	call		tmr0.stop
	BTFSC		edgeF.detected, PWMIN
	call		tmr0.start
	goto		MAINLOOP 
	
tmr0.start
	CLRF		TMR0
	MOVLW		(1 << TMR0IF)
	XORWF		INTCON, W
	ANDWF		INTCON, F
	return
tmr0.stop
	MOVF		TMR0,W
	CLRC
	CLRZ
	SUBWF		count,W
	btfsc		STATUS,Z
	return
	btfss		STATUS,C
	goto		inc.nco
	decf		NCO1INCL,F	
	decf		count,F
	return	
inc.nco		
	incf		NCO1INCL,F
	incf		count,F
	return
	


;====================================================================
      END

    
    
    
